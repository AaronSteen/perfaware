CHANGES

-- Changes to sim.h --
Added DoNotCrossThisLine field to the string struct:
struct string
{
    SIZE_T Len;
    char String[MAX_STRING_LEN];
    char *Ptr;
    char *DoNotCrossThisLine;
};

I added these data structures:
enum int_to_print_type
{
    SIGNED_8 = 0,
    UNSIGNED_8 = 1,
    SIGNED_16 = 2,
    UNSIGNED_16 = 3,
};

union int_to_print_data
{
    s8 Sint8;
    u8 Uint8;
    s16 Sint16;
    u16 Uint16;
};

struct int_to_print
{
    enum int_to_print_type Type;
    enum int_to_print_data Data;
};

-- Changes to functions.c --

I refactored this function in functions.c to add a buffer overflow check:
internal void
SteenCopy(struct string *Dest, char *Source, SIZE_T NumBytes)
{
    for(int i = 0; i < NumBytes; i++)
    {
	if((Dest->Ptr + 1) >= Dest->DoNotCrossThisLine)
	{
	    Debug_OutputErrorMessage("String buffer overflow", __func__, __LINE__);
	}
	else
	{
	    *Dest->Ptr++ = *Source++;
	    Dest->Len++;
	}
    }
}

I added this function to initialize strings: 
internal void
InitString(struct string *String)
{
    String->Len = 0;
    String->Ptr = String->String;
    String->DoNotCrossThisLine = String->Start + MAX_STRING_LEN;
}

I am replacing the Get8BitsAsChars and Get16BitsAsChars functions with this function,
which uses the new int_to_print struct:
internal void
GetIntAsChars(struct string *IntToPrintString, struct int_to_print IntToPrint)
{
    switch(IntToPrint.Type)
    {
	case(SIGNED_8)
	{
	    IntToPrintString.Len = sprintf_s(IntToPrintString.Ptr, sizeof(PrintBuffer), 
					    "%d", IntToPrint.Sint8);
	} break;

	case(UNSIGNED_8)
	{
	    IntToPrintString.Len = sprintf_s(IntToPrintString.Ptr, sizeof(PrintBuffer), 
					    "%d", IntToPrint.Uint8);
	} break;

	case(SIGNED_16)
	{
	    IntToPrintString.Len = sprintf_s(IntToPrintString.Ptr, sizeof(PrintBuffer), 
					    "%d", IntToPrint.Sint16);
	} break;

	case(UNSIGNED_16)
	{
	    IntToPrintString.Len = sprintf_s(IntToPrintString.Ptr, sizeof(PrintBuffer), 
					    "%d", IntToPrint.Uint16);
	} break;
    }
}
